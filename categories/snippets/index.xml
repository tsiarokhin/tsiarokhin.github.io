<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snippets on Maksim Tsiarokhin</title>
    <link>https://tsiarokhin.com/categories/snippets/</link>
    <description>Recent content in Snippets on Maksim Tsiarokhin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Feb 2023 20:41:02 +0100</lastBuildDate><atom:link href="https://tsiarokhin.com/categories/snippets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AxDB snapshot: how to create and restore</title>
      <link>https://tsiarokhin.com/posts/axdb-snapshot-create-and-restore/</link>
      <pubDate>Sat, 11 Feb 2023 20:41:02 +0100</pubDate>
      
      <guid>https://tsiarokhin.com/posts/axdb-snapshot-create-and-restore/</guid>
      <description>When you are working on a really hard-to-reproduce issue in D365FO and finally manage to do it, you wish there was an option to save this database state and quickly get back to it. Of course, you can always do a full AxDB database backup and restore it every time after an unsuccessful debug attempt, but it takes minutes to do.
Create snapshotLink to headingFortunately, SQL server provides a quicker option - database snapshots.</description>
    </item>
    
    <item>
      <title>Get enum value in debugger</title>
      <link>https://tsiarokhin.com/posts/enum-value-debugger/</link>
      <pubDate>Mon, 07 Nov 2022 20:07:24 +0100</pubDate>
      
      <guid>https://tsiarokhin.com/posts/enum-value-debugger/</guid>
      <description>It&amp;rsquo;s annoying when the debugger displays an integer instead of actual enum parameter. One way to see it is to paste the following code to the Immediate Window:
Microsoft.Dynamics.Ax.Xpp.PredefinedFunctions.Enum2Str(salesLine.SalesType) More tricks like this can be found here: Visual Studio Debugger capabilities</description>
    </item>
    
    <item>
      <title>Get integer enum value</title>
      <link>https://tsiarokhin.com/posts/integer-enum-value/</link>
      <pubDate>Tue, 19 Jul 2022 19:56:49 +0100</pubDate>
      
      <guid>https://tsiarokhin.com/posts/integer-enum-value/</guid>
      <description>Replace SalesStatus with your enum:
select t1.NAME, t2.ENUMID, t2.ENUMVALUE, t2.NAME EnumValueName from ENUMIDTABLE t1 join ENUMVALUETABLE t2 on t1.ID = t2.ENUMID where t1.NAME = &amp;#39;SalesStatus&amp;#39; </description>
    </item>
    
    <item>
      <title>Clear Dual-Write configuration after database restore</title>
      <link>https://tsiarokhin.com/posts/clear-dual-write-config/</link>
      <pubDate>Tue, 12 Jul 2022 19:36:24 +0100</pubDate>
      
      <guid>https://tsiarokhin.com/posts/clear-dual-write-config/</guid>
      <description>USE [AxDB] DELETE FROM [dbo].[DUALWRITEPROJECTCONFIGURATION] DELETE FROM [dbo].[DUALWRITEPROJECTFIELDCONFIGURATION] DELETE FROM [dbo].[BUSINESSEVENTSDEFINITION] </description>
    </item>
    
    <item>
      <title>Add field lookup to extended form</title>
      <link>https://tsiarokhin.com/posts/add-lookup-extended-form/</link>
      <pubDate>Tue, 03 May 2022 20:17:50 +0100</pubDate>
      
      <guid>https://tsiarokhin.com/posts/add-lookup-extended-form/</guid>
      <description>Create new event handler class:
class EZDNRParametersFormEventHandler { [FormDataSourceEventHandler(formDataSourceStr(DNRParameters, RORParameters), FormDataSourceEventType::Initialized)] public static void RORParameters_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e) { _sender.object(fieldNum(RORParameters, EZExcessHoursCategoryId)).registerOverrideMethod( methodStr(FormDataObject, lookup), methodStr(EZDNRParametersFormEventHandler, excessHoursCategoryIdLookup), new EZDNRParametersFormEventHandler()); } public void excessHoursCategoryIdLookup(FormStringControl _control) { QueryBuildDataSource queryBuildDataSource; QueryBuildRange queryBuildRange; SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjCategory), _control); sysTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryId), true); sysTableLookup.addLookupfield(fieldNum(ProjCategory, Name)); Query query = new Query(); query.addDataSource(tableNum(ProjCategory)) .addRange(fieldNum(ProjCategory, CategoryType)) .value(queryValue(ProjCategoryType::Hour)); sysTableLookup.parmQuery(query); sysTableLookup.performFormLookup(); } } </description>
    </item>
    
    <item>
      <title>Add jumpRef method to extended form</title>
      <link>https://tsiarokhin.com/posts/add-jumpref-extended-form/</link>
      <pubDate>Thu, 28 Apr 2022 20:27:59 +0100</pubDate>
      
      <guid>https://tsiarokhin.com/posts/add-jumpref-extended-form/</guid>
      <description>class EZProjInvoiceProposalDetailFormEventHandler { [FormEventHandler(formStr(ProjInvoiceProposalDetail), FormEventType::Initialized)] public static void ProjInvoiceProposalDetail_OnInitialized(xFormRun _sender, FormEventArgs _e) { FormStringControl lineOfBusinessIdControl = _sender.design().controlName(formControlStr(ProjInvoiceProposalDetail, EZLineOfBusinessId)); lineOfBusinessIdControl.registerOverrideMethod( methodStr(FormStringControl, jumpRef), methodStr(EZProjInvoiceProposalDetailFormEventHandler, lineOfBusinessJumpRef), new EZProjInvoiceProposalDetailFormEventHandler()); } public void lineOfBusinessJumpRef(FormStringControl _control) { LineOfBusiness lineOfBusiness = LineOfBusiness::find(_control.valueStr()); Args args = new Args(); args.caller(_control.formRun()); args.record(lineOfBusiness); args.lookupRecord(lineOfBusiness); new MenuFunction(menuItemDisplayStr(LineOfBusiness), MenuItemType::Display).run(args); } } </description>
    </item>
    
  </channel>
</rss>
